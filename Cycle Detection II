//Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.
//Initially take two pointers, fast and slow. The fast pointer takes two steps ahead while the slow pointer will take a single step ahead for each iteration.
// We know that if a cycle exists, fast and slow pointers will collide.
// If the cycle does not exist, the fast pointer will move to NULL Else, when both slow and fast pointer collides, it detects a cycle exists.
// Take another pointer, say temp. Point to the very first of the linked list.
// Move the slow and the entry pointer ahead by single steps until they collide. 
// Once they collide we get the starting node of the linked list.
// But why use another pointer,? :- Letâ€™s say a slow pointer covers the L2 distance from the starting node of the cycle until it collides with a fast pointer. 
//L1 is the distance traveled by the temp pointer to the starting node of the cycle. So, in total, the slow pointer covers the L1+L2 distance. 
//We know that a fast pointer covers some steps more than a slow pointer. Therefore, we can say that a fast pointer will surely cover the L1+L2 distance. 
//Plus, a fast pointer will cover more steps which will accumulate to nC length where cC is the length of the cycle and n is the number of turns. 
//Thus, the fast pointer covers the total length of L1+L2+nC. 

// We know that the slow pointer travels twice the fast pointer. So this makes the equation to

// 2(L1+L2) = L1+L2+nC. This makes the equation to

// L1+L2 = nC. Moving L2 to the right side

// L1 = nC-L2 and this shows why the entry pointer and the slow pointer would collide.
public ListNode detectCycle(ListNode head) {
        if(head == null||head.next == null) return null;
        ListNode fast = head;
        ListNode slow = head;
        
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
            
            if (slow == fast){
                ListNode temp = head;
                while (slow != temp){
                    temp = temp.next;
                    slow = slow.next;
                }
                return slow;
            }
        }
        return null;
    }
