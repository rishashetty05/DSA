//leetcode : Intersection of 2 linked list 

// Mthd 1: if ptr1 or 2 reached null assign the other head, viceversa. On second round if ptr1 & 2 does not colllide or both of them goes null its not a intersection 
public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode ptr1 =   headA;
        ListNode ptr2 =   headB;
        if (ptr1 == null || ptr2 == null) {
            return null;
        }
        while (ptr1!=ptr2){
            ptr1 = ptr1.next;
            ptr2 = ptr2.next;
            
            if(ptr1 == ptr2)
                return ptr1;
            
            if (ptr1 == null){
                ptr1 = headB;
            }
            if (ptr2 == null){
                ptr2 = headA;
            }
        }
        return ptr1;
    }
    
    //Mth 2: difference mthd 
    
  public ListNode getIntersectionNode(ListNode headA, ListNode headB)
       int len1 = 0,len2 = 0;
       while(headA != null || headB != null) {
            if(headA != null) {
                ++len1; headA = head1.next;
            }
            if(headB != null) {
                ++len2; headB = head2.next;
            }
        }
       int diff = len1-len2;
       if(diff < 0)   while(diff++ != 0) {head2 = head2.next;} 
       else           while(diff-- != 0) {head1 = head1.next;}
       while(head1 != null) {
            if(head1 == head2) return head1;
            head2 = head2.next;
            head1 = head1.next;
        }
       return head1;
       
