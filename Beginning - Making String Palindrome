//Given a string A of size N consisting only of lowercase alphabets. The only operation allowed is to insert characters in the beginning of the string.

// Find and return how many minimum characters are needed to be inserted to make the string a palindrome string.



// Problem Constraints
// 1 <= N <= 106



// Input Format
// The only argument given is a string A.



// Output Format
// Return an integer denoting the minimum characters needed to be inserted in the beginning to make the string a palindrome string.



// Example Input
// Input 1:

//  A = "abc"
// Input 2:

//  A = "bb"


// Example Output
// Output 1:

//  2
// Output 2:

//  0


// Example Explanation
// Explanation 1:

//  Insert 'b' at beginning, string becomes: "babc".
//  Insert 'c' at beginning, string becomes: "cbabc".
// Explanation 2:

//  There is no need to insert any character at the beginning as the string is already a palindrome.

public class Solution {
    public int[] computeLPSArray (String str){
        int n = str.length();
        //System.out.println("n is "+n);
        int lps[] = new int[n];
        lps[0] = 0;
        for (int i=1; i<n; i++){
            //System.out.println("i "+i);
            int x = lps[i-1];
            while(str.charAt(i) != str.charAt(x)){
                if(x==0){
                    break;
                }
                x = lps[x-1]; 
            }
            lps[i] = x+1;
                //System.out.println("lps[i] "+lps[i]);
        }
        return lps;
    }
    public int solve(String A) {
        StringBuilder s = new StringBuilder();
        s.append(A);
        //System.out.println("S is "+ s);
        String rev = s.reverse().toString(); //sb to reverse and toString
        //System.out.println("rev is "+ rev);
        s.reverse().append("$").append(rev);// reverse s to its original form and append $ and rev string
        //System.out.println("New S is "+ s);
        int [] lps = computeLPSArray(s.toString());
        int n = lps.length;
        //System.out.println(n);
        //System.out.println(lps[n-1]);
        return (A.length()-lps[n-1]);
    }
 }
